#!/usr/bin/env ruby

require 'yummi'
require 'optionparser'

require_relative '../lib/sherlog_holmes'

include Sherlog

@opts = OptionParser::new
@filter_params = {}
@params = {}

@opts.banner = 'Usage: sherlog [options] <logfile>'

@opts.on '-c EXPRESSION', '--category EXPRESSION', 'Set the category filter regexp' do |expression|
  @filter_params[:category] = expression
end

@opts.on '-l EXPRESSION', '--level EXPRESSION', 'Set the level filter regexp' do |expression|
  @filter_params[:level] = expression
end

[:error, :info, :warn, :debug, :fatal].each do |level|
  @opts.on "--#{level}", "Filter #{level.upcase} logs" do
    if @filter_params[:level]
      @filter_params[:level] += "|#{level}"
    else
      @filter_params[:level] = level.to_s
    end
  end
end

@opts.on '-m EXPRESSION', '--message EXPRESSION', 'Set the message filter regexp' do |expression|
  @filter_params[:message] = expression
end

@opts.on '-e EXPRESSION', '--exception EXPRESSION', 'Sets the exception filter regexp' do |expression|
  @filter_params[:exception] = expression
end

@opts.on '--no-stacktrace', 'Omits the stacktrace when showing log entries' do
  @params[:stacktrace] = false
end

@opts.on '--only-exceptions', 'Filter only exception entries' do
  @only_exceptions = true
end

@opts.on '--show-log', 'Shows the filtered entries' do
  @print_log = true
end

@opts.on '--show-info', 'Shows information about the filtered entries' do
  @print_info = true
end

@opts.on '--show-exception', 'Shows filtered entries that contains an exception' do
  @print_exception_entries = true
end

@opts.on '--show-exception-info', 'Shows filtered entries that contains an exception' do
  @print_exception_info = true
end

@opts.on '-h', '--help', 'Shows the usage help' do
  puts @opts
  exit
end

@opts.parse! ARGV

file = ARGV.first
filter = LogFilter::new
filter.exceptions if @only_exceptions
@filter_params.each do |param, expression|
  filter.send param, expression
end
log = LogFile::new file, filter, @params
log.read
log.print_info if @print_info
log.print_exception_info if @print_exception_info
log.print_exception_entries if @print_exception_entries
log.print_entries if @print_log
