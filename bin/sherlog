#!/usr/bin/env ruby
#                         The MIT License
#
# Copyright (c) 2015 Marcelo "Ataxexe" Guimar√£es <ataxexe@devnull.tools>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'yummi'
require 'optionparser'

require_relative '../lib/sherlog_holmes'

include Sherlog

@opts = OptionParser::new
@stacktrace = true
@filter = nil
@operation = :and
@listeners = {}

def add_filter(filter)
  if @filter
    @filter = @filter.send @operation, filter
  else
    @filter = filter
  end
end

@opts.banner = 'Usage: sherlog [options] <logfile>'

@opts.on '-p FILE', '--patterns FILE', 'Configures the patterns' do |file|
  Sherlog.load_patterns file
end

@opts.on '-c EXPRESSION', '--category EXPRESSION', 'Set the category filter expression' do |expression|
  add_filter Filter::category(expression)
end

@opts.on '-l EXPRESSION', '--level EXPRESSION', 'Set the level filter expression' do |expression|
  add_filter Filter::level(expression)
end

@opts.on '-o EXPRESSION', '--origin EXPRESSION', 'Sets the origin filter expression' do |expression|
  add_filter Filter::origin(expression)
end

@opts.on '-m EXPRESSION', '--message EXPRESSION', 'Set the message filter expression' do |expression|
  add_filter Filter::message(expression)
end

@opts.on '-e EXPRESSION', '--exception EXPRESSION', 'Sets the exception filter expression' do |expression|
  add_filter Filter::exception(expression)
end

@opts.on '--any-exception', 'Filter exception entries' do
  add_filter Filter::exceptions
end

@opts.on '--and', 'Sets the next filter to use the AND operator' do
  @operation = :and
end

@opts.on '--or', 'Sets the next filter to use the OR operation' do
  @operation = :or
end

@opts.on '-t TYPE', '--type TYPE', 'Sets the type of the log (for loading patterns)' do |type|
  @type = type.to_sym
end

@opts.on '--print', 'Prints the filtered entries' do
  @listeners[:print] = PrintListener::new
end

@opts.on '--no-stacktrace', 'Do not print stacktraces (use with --print)' do
  @no_stacktrace = true
end

@opts.on '-h', '--help', 'Shows the usage help' do
  puts @opts
  exit
end

@opts.parse! ARGV

@listeners[:print].hide_stacktrace if @no_stacktrace and @listeners[:print]

file = ARGV.first
parser = Sherlog.parser @type if @type
parser ||= Parser::new
parser.filter @filter
@listeners.values.each do |listener|
  parser.on_new_entry listener
end
begin
  if file
    parser.parse file
  else
    ARGF.each_line do |line|
      parser.parse line.chomp
    end
  end
rescue Interrupt
  exit
end
